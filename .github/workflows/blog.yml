name: Generate Static Blog from Issues

on:
  issues:
    types: [opened, edited, closed, reopened, labeled, unlabeled]
  schedule:
    # Rebuild daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/blog.yml' ]

permissions:
  contents: read
  pages: write
  id-token: write
  issues: read

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-blog:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Fetch issues and generate blog
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        cat > generate-blog.js << 'EOF'
        const fs = require('fs');
        const https = require('https');
        
        const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
        const REPO_OWNER = process.env.REPO_OWNER;
        const REPO_NAME = process.env.REPO_NAME;
        
        async function fetchIssues() {
          return new Promise((resolve, reject) => {
            const options = {
              hostname: 'api.github.com',
              path: `/repos/${REPO_OWNER}/${REPO_NAME}/issues?state=all&sort=created&direction=desc&per_page=100`,
              method: 'GET',
              headers: {
                'User-Agent': 'GitHub-Pages-Blog-Generator',
                'Authorization': `Bearer ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
              }
            };
            
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                if (res.statusCode === 200) {
                  const issues = JSON.parse(data).filter(issue => !issue.pull_request);
                  resolve(issues);
                } else {
                  reject(new Error(`API returned ${res.statusCode}: ${data}`));
                }
              });
            });
            
            req.on('error', reject);
            req.end();
          });
        }
        
        function formatDate(dateString) {
          const options = { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          };
          return new Date(dateString).toLocaleDateString('en-US', options);
        }
        
        function markdownToHtml(markdown) {
          if (!markdown) return '';
          
          let html = markdown
            .replace(/^### (.*$)/gim, '<h3>$1</h3>')
            .replace(/^## (.*$)/gim, '<h2>$1</h2>')
            .replace(/^# (.*$)/gim, '<h1>$1</h1>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>')
            .replace(/`(.*?)`/g, '<code>$1</code>')
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>')
            .replace(/^- (.*$)/gim, '<li>$1</li>')
            .replace(/^\d+\. (.*$)/gim, '<li>$1</li>')
            .replace(/^---$/gim, '<hr>')
            .replace(/\n/g, '<br>');
          
          html = html.replace(/(<li>.*?<\/li>(?:\s*<li>.*?<\/li>)*)/gs, '<ul>$1</ul>');
          
          return html;
        }
        
        function generateHTML(issues) {
          const openIssues = issues.filter(issue => issue.state === 'open');
          const closedIssues = issues.filter(issue => issue.state === 'closed');
          
          // Collect all unique labels for tag filtering
          const allLabels = new Set();
          issues.forEach(issue => {
            issue.labels.forEach(label => allLabels.add(label.name));
          });
          
          function renderIssues(issueList, sectionTitle) {
            if (issueList.length === 0) return '';
            
            const postsHtml = issueList.map(issue => {
              const labelsHtml = issue.labels && issue.labels.length > 0 
                ? `<div class="labels">${issue.labels.map(label => 
                    `<span class="label tag-${label.name}" data-tag="${label.name}" style="background-color: #${label.color || 'e1e4e8'}; color: ${getContrastColor(label.color || 'e1e4e8')}">${label.name}</span>`
                  ).join('')}</div>`
                : '';
              
              return `
                <article class="blog-post" data-tags="${issue.labels.map(l => l.name).join(',')}">
                  <h2>
                    <a href="${issue.html_url}" target="_blank" class="post-title">
                      ${issue.title}
                    </a>
                    <span class="state-badge state-${issue.state.toLowerCase()}">${issue.state.toLowerCase()}</span>
                  </h2>
                  <div class="post-meta">
                    Published on ${formatDate(issue.created_at)} by ${issue.user.login}
                    ${issue.comments > 0 ? ` • ${issue.comments} comment${issue.comments === 1 ? '' : 's'}` : ''}
                  </div>
                  ${labelsHtml}
                  <div class="post-content">
                    ${markdownToHtml(issue.body) || '<em>No content</em>'}
                  </div>
                </article>
              `;
            }).join('');
            
            return `
              <section class="posts-section">
                <h2 class="section-title">${sectionTitle}</h2>
                ${postsHtml}
              </section>
            `;
          }
          
          function getContrastColor(hex) {
            const r = parseInt(hex.substr(0, 2), 16);
            const g = parseInt(hex.substr(2, 2), 16);
            const b = parseInt(hex.substr(4, 2), 16);
            const brightness = (r * 299 + g * 587 + b * 114) / 1000;
            return brightness > 125 ? '#000000' : '#ffffff';
          }
          
          const tagFilterHtml = allLabels.size > 0 
            ? `<div class="tag-filters">
                 <button class="tag-filter active" data-tag="all">All Posts</button>
                 ${Array.from(allLabels).map(tag => 
                   `<button class="tag-filter" data-tag="${tag}">${tag}</button>`
                 ).join('')}
               </div>`
            : '';
          
          return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fun Blog - Issues as Posts</title>
    <meta name="description" content="A blog powered by GitHub Issues with archive and tag support">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f8f9fa;
            padding: 20px;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        header {
            text-align: center;
            margin-bottom: 40px;
            border-bottom: 2px solid #eee;
            padding-bottom: 20px;
        }
        
        h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .subtitle {
            color: #7f8c8d;
            font-size: 1.1em;
        }
        
        .last-updated {
            text-align: center;
            color: #95a5a6;
            font-size: 0.9em;
            margin-bottom: 30px;
        }
        
        .tag-filters {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .tag-filter {
            display: inline-block;
            padding: 6px 12px;
            margin: 3px;
            background: #e9ecef;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.2s;
        }
        
        .tag-filter:hover, .tag-filter.active {
            background: #007bff;
            color: white;
        }
        
        .section-title {
            color: #495057;
            font-size: 1.3em;
            margin: 30px 0 20px 0;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
        }
        
        .posts-section:first-child .section-title {
            margin-top: 0;
        }
        
        .blog-post {
            margin-bottom: 40px;
            padding-bottom: 30px;
            border-bottom: 1px solid #eee;
        }
        
        .blog-post:last-child {
            border-bottom: none;
        }
        
        .blog-post.hidden {
            display: none;
        }
        
        .post-title {
            color: #2980b9;
            font-size: 1.6em;
            margin-bottom: 10px;
            text-decoration: none;
        }
        
        .post-title:hover {
            text-decoration: underline;
        }
        
        .post-meta {
            color: #95a5a6;
            font-size: 0.9em;
            margin-bottom: 15px;
        }
        
        .post-content {
            font-size: 1.1em;
            line-height: 1.7;
        }
        
        .post-content h1, .post-content h2, .post-content h3 {
            color: #2c3e50;
            margin: 20px 0 10px 0;
        }
        
        .post-content ul, .post-content ol {
            margin-left: 20px;
            margin-bottom: 15px;
        }
        
        .post-content code {
            background: #f4f4f4;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Monaco', 'Consolas', monospace;
        }
        
        .post-content pre {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            margin: 15px 0;
        }
        
        .post-content pre code {
            background: none;
            padding: 0;
        }
        
        .state-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
            margin-left: 10px;
        }
        
        .state-open {
            background: #28a745;
            color: white;
        }
        
        .state-closed {
            background: #6c757d;
            color: white;
        }
        
        .labels {
            margin-top: 10px;
        }
        
        .label {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.75em;
            margin-right: 5px;
            font-weight: 500;
            cursor: pointer;
            transition: opacity 0.2s;
        }
        
        .label:hover {
            opacity: 0.8;
        }
        
        .no-posts {
            text-align: center;
            color: #7f8c8d;
            font-style: italic;
            padding: 40px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>🎉 Fun Blog</h1>
            <p class="subtitle">Issues as Posts • Archive • Tags</p>
        </header>
        
        <div class="last-updated">
            Last updated: ${new Date().toLocaleString('en-US', { timeZone: 'UTC' })} UTC
        </div>
        
        ${tagFilterHtml}
        
        <div id="blog-posts">
            ${issues.length === 0 
              ? '<div class="no-posts">No blog posts yet. <a href="https://github.com/' + REPO_OWNER + '/' + REPO_NAME + '/issues/new" target="_blank">Create an issue</a> to write your first post!</div>'
              : (renderIssues(openIssues, '📝 Recent Posts') + renderIssues(closedIssues, '📁 Archive'))
            }
        </div>
    </div>
    
    <script>
        // Tag filtering functionality
        document.addEventListener('DOMContentLoaded', function() {
            const tagFilters = document.querySelectorAll('.tag-filter');
            const blogPosts = document.querySelectorAll('.blog-post');
            
            tagFilters.forEach(filter => {
                filter.addEventListener('click', function() {
                    const selectedTag = this.getAttribute('data-tag');
                    
                    // Update active filter
                    tagFilters.forEach(f => f.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Show/hide posts based on tag
                    blogPosts.forEach(post => {
                        const postTags = post.getAttribute('data-tags').split(',');
                        
                        if (selectedTag === 'all' || postTags.includes(selectedTag)) {
                            post.classList.remove('hidden');
                        } else {
                            post.classList.add('hidden');
                        }
                    });
                });
            });
            
            // Make label tags clickable for filtering
            document.querySelectorAll('.label').forEach(label => {
                label.addEventListener('click', function() {
                    const tag = this.getAttribute('data-tag');
                    const targetFilter = document.querySelector(`[data-tag="${tag}"]`);
                    if (targetFilter) {
                        targetFilter.click();
                    }
                });
            });
        });
    </script>
</body>
</html>`;
        }
        
        async function main() {
          try {
            console.log('Fetching issues...');
            const issues = await fetchIssues();
            console.log(`Found ${issues.length} issues`);
            
            const html = generateHTML(issues);
            fs.writeFileSync('index.html', html);
            console.log('Generated index.html successfully!');
          } catch (error) {
            console.error('Error:', error);
            process.exit(1);
          }
        }
        
        main();
        EOF
        
        node generate-blog.js
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4